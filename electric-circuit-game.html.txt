<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Interactive Ohm's Law Circuit</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap');
  body {
    margin: 0;
    font-family: 'Roboto Mono', monospace;
    background: linear-gradient(135deg, #1e293b, #0f172a);
    color: #e0e0e0;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    user-select: none;
  }

  h1 {
    margin: 24px 0 10px 0;
    font-weight: 700;
    color: #22d3ee;
    text-shadow: 0 0 6px #22d3ee;
  }

  #ui {
    background: #1e293b;
    padding: 20px 30px;
    border-radius: 12px;
    box-shadow: 0 6px 20px rgba(34, 211, 238, 0.4);
    width: 400px;
    text-align: center;
    margin-bottom: 24px;
  }

  label {
    display: block;
    margin: 15px 0 10px;
    font-weight: 600;
    font-size: 1rem;
    color: #cbd5e1;
  }

  /* Slider and number input container */
  .input-group {
    display: flex;
    align-items: center;
    gap: 12px;
    justify-content: center;
    margin-top: 8px;
  }

  /* Realistic slider style */
  input[type="range"] {
    -webkit-appearance: none;
    width: 70%;
    height: 12px;
    border-radius: 8px;
    background: #334155;
    outline: none;
    cursor: pointer;
    box-shadow: inset 2px 2px 4px #263544,
                inset -2px -2px 4px #40506f;
    transition: background 0.3s ease;
  }
  input[type="range"]:hover {
    background: #3b82f6;
  }
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 24px;
    height: 24px;
    background: #22d3ee;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 4px 6px rgba(34, 211, 238, 0.7);
    transition: background 0.3s ease;
  }
  input[type="range"]:hover::-webkit-slider-thumb {
    background: #0ea5e9;
  }
  input[type="range"]::-moz-range-thumb {
    width: 24px;
    height: 24px;
    background: #22d3ee;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 4px 6px rgba(34, 211, 238, 0.7);
    transition: background 0.3s ease;
  }

  /* Number inputs */
  input[type="number"] {
    width: 60px;
    padding: 4px 8px;
    border-radius: 8px;
    border: none;
    font-size: 1rem;
    font-family: 'Roboto Mono', monospace;
    text-align: center;
    box-shadow:
      inset 2px 2px 4px #263544,
      inset -2px -2px 4px #40506f;
    background: #334155;
    color: #e0e0e0;
  }
  input[type="number"]:focus {
    outline: 2px solid #22d3ee;
    background: #3b82f6;
  }

  #current {
    font-weight: 700;
    font-size: 1.2rem;
  }

  #message {
    margin-top: 18px;
    font-weight: 700;
    font-size: 1.1rem;
  }

  /* Switch container */
  #switchContainer {
    margin-top: 18px;
    display: flex;
    justify-content: center;
  }

  /* Light switch style toggle */

  .switch {
    display: inline-block;
    cursor: pointer;
    position: relative;
    user-select: none;
  }

  /* Hide the native checkbox input but keep it accessible */
  .switch input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  /* Switch plate */
  .switch-plate {
    width: 40px;
    height: 80px;
    background-color: #64748b;
    border-radius: 12px;
    box-shadow:
      inset 2px 2px 5px #52606d,
      inset -2px -2px 5px #7b8ba3;
    position: relative;
    transition: background-color 0.3s ease;
  }

  /* The toggle */
  .switch-toggle {
    width: 32px;
    height: 36px;
    background-color: #cbd5e1;
    border-radius: 8px;
    position: absolute;
    bottom: 6px;
    left: 4px;
    box-shadow:
      0 2px 6px rgba(0, 0, 0, 0.3);
    transition: bottom 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease;
  }

  /* When checked: toggle moves up and glows */
  .switch input:checked + .switch-plate {
    background-color: #22d3ee;
    box-shadow:
      inset 2px 2px 6px #19a3be,
      inset -2px -2px 6px #2ee6ff;
  }
  .switch input:checked + .switch-plate .switch-toggle {
    bottom: 38px;
    background-color: #facc15;
    box-shadow:
      0 0 10px 3px #facc15,
      0 0 15px 6px #facc15;
  }

  /* Canvas styling */
  canvas {
    background: #334155;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.6);
    cursor: default;
  }

  /* Bulb filament animation */
  @keyframes filamentGlow {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 1; }
  }
</style>
</head>
<body>

  <h1>⚡ Ohm's Law Circuit Game</h1>

  <div id="ui">
    <label for="voltage">Voltage (V): <span id="vVal">5</span></label>
    <div class="input-group">
      <input type="range" id="voltage" min="1" max="200" value="5" step="0.1" />
      <input type="number" id="voltageNum" min="1" max="200" value="5" step="0.1" />
    </div>

    <label for="resistance">Resistance (Ω): <span id="rVal">10</span></label>
    <div class="input-group">
      <input type="range" id="resistance" min="1" max="410" value="10" step="1" />
      <input type="number" id="resistanceNum" min="1" max="410" value="10" step="1" />
    </div>

    <p>Current (I = V / R): <span id="current">0.5</span> A</p>

    <div id="switchContainer">
      <label class="switch" title="Toggle Switch">
        <input type="checkbox" id="switchInput" />
        <div class="switch-plate">
          <div class="switch-toggle"></div>
        </div>
      </label>
    </div>

    <p id="message">Turn ON the switch to close the circuit.</p>
  </div>

  <canvas id="circuitCanvas" width="700" height="300" aria-label="Ohm's Law Circuit Visualization"></canvas>

<script>
  const canvas = document.getElementById('circuitCanvas');
  const ctx = canvas.getContext('2d');

  const voltageSlider = document.getElementById('voltage');
  const resistanceSlider = document.getElementById('resistance');
  const voltageNum = document.getElementById('voltageNum');
  const resistanceNum = document.getElementById('resistanceNum');
  const vVal = document.getElementById('vVal');
  const rVal = document.getElementById('rVal');
  const currentDisplay = document.getElementById('current');
  const message = document.getElementById('message');
  const switchInput = document.getElementById('switchInput');

  // Sync sliders and number inputs
  function syncVoltageFromSlider() {
    voltageNum.value = voltageSlider.value;
    update();
  }
  function syncVoltageFromNum() {
    let val = parseFloat(voltageNum.value);
    if (isNaN(val) || val < 1) val = 1;
    else if (val > 200) val = 200;
    voltageNum.value = val;
    voltageSlider.value = val;
    update();
  }
  function syncResistanceFromSlider() {
    resistanceNum.value = resistanceSlider.value;
    update();
  }
  function syncResistanceFromNum() {
    let val = parseInt(resistanceNum.value);
    if (isNaN(val) || val < 1) val = 1;
    else if (val > 410) val = 410;
    resistanceNum.value = val;
    resistanceSlider.value = val;
    update();
  }

  voltageSlider.addEventListener('input', syncVoltageFromSlider);
  voltageNum.addEventListener('change', syncVoltageFromNum);
  resistanceSlider.addEventListener('input', syncResistanceFromSlider);
  resistanceNum.addEventListener('change', syncResistanceFromNum);
  switchInput.addEventListener('change', update);

  function drawCircuit(voltage, resistance, isOn) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.lineCap = 'round';

    // Draw battery (left)
    ctx.fillStyle = '#0ea5e9';
    ctx.strokeStyle = '#22d3ee';
    ctx.lineWidth = 4;

    // Battery outer rectangle
    ctx.fillRect(50, 100, 40, 100);
    ctx.strokeRect(50, 100, 40, 100);

    // Battery poles
    ctx.fillStyle = '#22d3ee';
    ctx.fillRect(70, 90, 10, 10); // top pole +
    ctx.fillRect(70, 210, 10, 10); // bottom pole -

    // Label voltage
    ctx.fillStyle = '#22d3ee';
    ctx.font = 'bold 20px Roboto Mono';
    ctx.fillText(voltage.toFixed(1) + ' V', 40, 95);

    // Draw wires
    ctx.strokeStyle = '#94a3b8';
    ctx.lineWidth = 6;

    // Left vertical wire from battery top pole
    ctx.beginPath();
    ctx.moveTo(75, 90);
    ctx.lineTo(75, 40);
    ctx.stroke();

    // Top horizontal wire
    ctx.beginPath();
    ctx.moveTo(75, 40);
    ctx.lineTo(320, 40);
    ctx.stroke();

    // Right vertical wire down to bulb or resistor
    ctx.beginPath();
    ctx.moveTo(320, 40);
    ctx.lineTo(320, 150);
    ctx.stroke();

    // Draw resistor (zig-zag)
    ctx.lineWidth = 4;
    ctx.strokeStyle = isOn ? '#22d3ee' : '#64748b';
    let resStartX = 320, resStartY = 150;
    let resLength = 150;
    let zigzagHeight = 20;
    let zigzagCount = 6;
    let segmentLength = resLength / (zigzagCount * 2);

    ctx.beginPath();
    ctx.moveTo(resStartX, resStartY);
    for (let i = 0; i < zigzagCount * 2; i++) {
      let x = resStartX + segmentLength * (i + 1);
      let y = resStartY + (i % 2 === 0 ? -zigzagHeight : zigzagHeight);
      ctx.lineTo(x, y);
    }
    ctx.lineTo(resStartX + resLength, resStartY);
    ctx.stroke();

    // Wire from resistor end down to bottom wire
    ctx.beginPath();
    ctx.moveTo(resStartX + resLength, resStartY);
    ctx.lineTo(resStartX + resLength, 220);
    ctx.stroke();

    // Bottom horizontal wire
    ctx.beginPath();
    ctx.moveTo(resStartX + resLength, 220);
    ctx.lineTo(75, 220);
    ctx.stroke();

    // Wire up to battery bottom pole
    ctx.beginPath();
    ctx.moveTo(75, 220);
    ctx.lineTo(75, 210);
    ctx.stroke();

    // Draw bulb circle with reactive glow based on current
    let current = isOn ? voltage / resistance : 0;
    const maxCurrent = 5; // maximum current to normalize glow intensity
    let glowIntensity = Math.min(current / maxCurrent, 1);

    const bulbX = 330;
    const bulbY = 220;
    const bulbRadius = 25;

    ctx.lineWidth = 3;
    ctx.strokeStyle = '#facc15';
    ctx.fillStyle = isOn ? `rgba(250, 204, 21, ${0.3 + 0.7 * glowIntensity})` : '#4b5563';

    ctx.beginPath();
    ctx.arc(bulbX, bulbY, bulbRadius, 0, Math.PI * 2);
    ctx.fill();
    ctx.stroke();

    // Bulb filament
    ctx.strokeStyle = isOn ? `rgba(255, 243, 196, ${0.4 + 0.6 * glowIntensity})` : '#374151';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(bulbX - 10, bulbY);
    ctx.lineTo(bulbX, bulbY - 12);
    ctx.lineTo(bulbX + 10, bulbY);
    ctx.stroke();

    // Glow halo around bulb if on and glowing
    if (isOn && glowIntensity > 0) {
      const glowRadius = bulbRadius + 20 * glowIntensity;
      const gradient = ctx.createRadialGradient(bulbX, bulbY, bulbRadius / 2, bulbX, bulbY, glowRadius);
      gradient.addColorStop(0, `rgba(250, 204, 21, ${0.6 * glowIntensity})`);
      gradient.addColorStop(1, 'rgba(250, 204, 21, 0)');
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(bulbX, bulbY, glowRadius, 0, Math.PI * 2);
      ctx.fill();
    }

    // Draw switch (right side)
    const switchX = 530;
    const switchY = 130;
    const switchWidth = 40;
    const switchHeight = 70;
    const switchRadius = 12;

    // Switch plate
    ctx.fillStyle = isOn ? '#22d3ee' : '#64748b';
    ctx.shadowColor = isOn ? '#22d3ee' : 'transparent';
    ctx.shadowBlur = isOn ? 15 : 0;
    ctx.beginPath();
    ctx.moveTo(switchX + switchRadius, switchY);
    ctx.lineTo(switchX + switchWidth - switchRadius, switchY);
    ctx.quadraticCurveTo(switchX + switchWidth, switchY, switchX + switchWidth, switchY + switchRadius);
    ctx.lineTo(switchX + switchWidth, switchY + switchHeight - switchRadius);
    ctx.quadraticCurveTo(switchX + switchWidth, switchY + switchHeight, switchX + switchWidth - switchRadius, switchY + switchHeight);
    ctx.lineTo(switchX + switchRadius, switchY + switchHeight);
    ctx.quadraticCurveTo(switchX, switchY + switchHeight, switchX, switchY + switchHeight - switchRadius);
    ctx.lineTo(switchX, switchY + switchRadius);
    ctx.quadraticCurveTo(switchX, switchY, switchX + switchRadius, switchY);
    ctx.closePath();
    ctx.fill();
    ctx.shadowBlur = 0;

    // Toggle
    const toggleHeight = 36;
    const toggleWidth = 32;
    const toggleX = switchX + 4;
    const toggleY = isOn ? switchY + 38 : switchY + 6;
    ctx.fillStyle = isOn ? '#facc15' : '#cbd5e1';
    ctx.shadowColor = isOn ? '#facc15' : 'transparent';
    ctx.shadowBlur = isOn ? 15 : 0;
    ctx.beginPath();
    ctx.moveTo(toggleX, toggleY);
    ctx.lineTo(toggleX + toggleWidth, toggleY);
    ctx.lineTo(toggleX + toggleWidth, toggleY + toggleHeight);
    ctx.lineTo(toggleX, toggleY + toggleHeight);
    ctx.closePath();
    ctx.fill();
    ctx.shadowBlur = 0;
  }

  function update() {
    const voltage = parseFloat(voltageSlider.value);
    const resistance = parseFloat(resistanceSlider.value);
    const isOn = switchInput.checked;

    vVal.textContent = voltage.toFixed(1);
    rVal.textContent = resistance.toFixed(0);

    let current = isOn ? voltage / resistance : 0;
    currentDisplay.textContent = current.toFixed(3);

    message.textContent = isOn
      ? `Current is flowing: I = ${current.toFixed(3)} A`
      : 'Turn ON the switch to close the circuit.';

    drawCircuit(voltage, resistance, isOn);
  }

  update();
</script>
</body>
</html>